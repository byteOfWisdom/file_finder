use std::fs;
use std::io;

use serde::{Deserialize, Serialize};

#[derive(Debug)]
pub struct SearchState {
	request : String,
	results : Vec<String>,
	files : Vec<>
	config : SearchConfig,
}


impl SearchState {
	pub fn new() -> Self {
		return SearchState {
			request : String::new(),
			results : Vec::new(),
			config : SearchConfig::default(),
		}
	}

	pub fn update_request(&mut self, new_request : String) {
		self.request = new_request.clone();
		self.results = vec!{String::from("dummy"), String::from("test")};
		let _ = self.search();
	}

	pub fn get_results(&self) -> Vec<String> {
		return self.results.clone();
	}

	fn get_files(&self)


	fn search(&mut self) -> Result<(), io::Error>{
		let mut search_loactions : Vec<String> = self.config.search_roots.clone();

		self.results = Vec::new();
		let ls = fs::read_dir(&self.request)?;
		for file in ls {
			let file = file?;

			if file.path().is_dir() {
				//add subdirectories to the todo and read those later
			} else {
				self.results.push(file.file_name().into_string().unwrap());
			}
		}

		Ok(())
	}


}


#[derive(Debug)]
struct SearchConfig {
	pub search_roots : Vec<String>,
	pub max_depth : usize,
}


impl SearchConfig {
	pub fn default() -> Self {
		SearchConfig {
			search_roots : vec!["~/".to_string(), "./".to_string()],
			max_depth : 5,
		}
	}
}